--------------------------------------------------------
--  DDL for Procedure I2B2_PROCESS_RAW_DATA_EXTRNL
--------------------------------------------------------


  CREATE OR REPLACE PROCEDURE "TM_CZ"."I2B2_PROCESS_RAW_DATA_EXTRNL" 
(
  trialID varchar2
 ,reloadType IN VARCHAR2 := 'R'
 ,currentJobID NUMBER := null
)
AS

--	JEA@20091117	Added reloadType processing to only delete matching trial/category data if reloadType = I otherwise delete all existing data for trial
--	JEA@20091117	Added auditing
--	JEA@20091208	Remove leading and trailing "'s in time_point_measurement columns generated by excel

  --Audit variables
  newJobFlag INTEGER(1);
  databaseName VARCHAR(100);
  procedureName VARCHAR(100);
  jobID number(18,0);
  stepCt number(18,0);

BEGIN
	
	stepCt := 0;
	
  --Set Audit Parameters
  newJobFlag := 0; -- False (Default)
  jobID := currentJobID;

  SELECT sys_context('USERENV', 'CURRENT_SCHEMA') INTO databaseName FROM dual;
  procedureName := $$PLSQL_UNIT;

  --Audit JOB Initialization
  --If Job ID does not exist, then this is a single procedure run and we need to create it
  IF(jobID IS NULL or jobID < 1)
  THEN
    newJobFlag := 1; -- True
    cz_start_audit (procedureName, databaseName, jobID);
  END IF;
	
  --Record counts to counts table
 
  INSERT
  INTO I2B2_LZ.TPM_COUNTS
  (
    STUDY_ID,
    CATEGORY_CD,
    RECORD_COUNT,
    LOAD_DATE
  )
  select 
    study_id,
    category_cd, 
    count(*),
    sysdate
    from i2b2_lz.time_point_measurement_extrnl
    where study_id = trialID
    group by 
      study_id,
      category_cd;
  commit;
    
	stepCt := stepCt + 1;
	control.cz_write_audit(jobId,databaseName,procedureName,'Record counts for external tpm table',SQL%ROWCOUNT,stepCt,'Done');
	
--	if reloadType = 'I', the data is an incremental load and only the data where trial name and category code match will be deleted
--	any other code (or none which defaults to R) is a full refresh and all the data for the trial is deleted

  if reloadType = 'I' then
	--Delete data from Time Point Measurement raw table where Trial Number and Category Code match.
	delete from i2b2_lz.time_point_measurement_raw
    where study_id = trialID
      and category_cd IN(select distinct category_cd from i2b2_lz.time_point_measurement_extrnl where study_id = trialID);
	  
	stepCt := stepCt + 1;
	control.cz_write_audit(jobId,databaseName,procedureName,'Delete matching trial/category in LZ time_point_measurement_raw',SQL%ROWCOUNT,stepCt,'Done');
	
	COMMIT;
  else
     delete from i2b2_lz.time_point_measurement_raw
	 where study_id = trialID;
	 
	 stepCt := stepCt + 1;
	 control.cz_write_audit(jobId,databaseName,procedureName,'Delete all trial data in LZ time_point_measurement_raw',SQL%ROWCOUNT,stepCt,'Done');
	 
	 commit;
  end if;
  
  --Insert new records into Raw tables
  insert into 
    i2b2_lz.time_point_measurement_raw
   (STUDY_ID
   ,USUBJID
   ,SITE_ID
   ,SUBJECT_ID
   ,VISIT_NAME
   ,DATASET_NAME
   ,SAMPLE_TYPE
   ,DATA_LABEL
   ,DATA_VALUE
   ,CATEGORY_CD
   ,PERIOD
   )
  select STUDY_ID
        ,USUBJID
        ,SITE_ID
        ,SUBJECT_ID
        ,trim('"' from VISIT_NAME)
        ,trim('"' from DATASET_NAME)
        ,trim('"' from SAMPLE_TYPE)
        ,trim('"' from DATA_LABEL)
        ,trim('"' from DATA_VALUE)
        ,trim('"' from CATEGORY_CD)
        ,trim('"' from PERIOD)
    from i2b2_lz.time_point_measurement_extrnl
    where study_id = trialID;
		 
	stepCt := stepCt + 1;
	control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial data into LZ time_point_measurement_raw',SQL%ROWCOUNT,stepCt,'Done');
	
  commit;
  
  --Clear the Working zone table
  execute immediate('truncate table i2b2_wz.time_point_measurement');
  
  --Load the new records into wz time_point_measurement
  insert into i2b2_wz.time_point_measurement
  (study_id
  ,site_id
  ,subject_id
  ,site_subj
  ,visit_date
  ,visit_name
  ,dataset_name
  ,endpoint_flag
  ,sample_type
  ,data_label
  ,data_value
  ,category_cd
  ,updated_value
  ,suppress_flag
  ,operator_flag
  ,valueflag_cd
  ,unit_cd
  ,etl_id
  ,data_type
  ,usubjid
  ,pd_marker
  ,period) 
  select study_id
        ,site_id
        ,subject_id
        ,null
        ,null
        ,trim('"' from visit_name)
        ,trim('"' from dataset_name)
        ,null
        ,trim('"' from sample_type)
        ,trim('"' from data_label)
        ,trim('"' from data_value)
        ,trim('"' from category_cd)
        ,null
        ,null
        ,null
        ,null
        ,null
        ,'JNJ@' || to_char(sysdate        ,'YYYYMMDD')
        ,null
        ,usubjid
        ,null
        ,trim('"' from period)
  from i2b2_lz.time_point_measurement_extrnl
  where data_value is not null
    and study_id = trialID;
	 
  stepCt := stepCt + 1;
  control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial data in WZ time_point_measurement',SQL%ROWCOUNT,stepCt,'Done');
  
  commit;
  
  --CATEGORY DATA
  --DELETE DATA from category table.
  if reloadType = 'I' then
      delete from i2b2_lz.category 
      where study_id = trialID
        and category_cd IN (Select category_cd from i2b2_lz.category_extrnl where study_id = trialID);
			 
      stepCt := stepCt + 1;
	  control.cz_write_audit(jobId,databaseName,procedureName,'Delete all matching trial/category data in LZ category',SQL%ROWCOUNT,stepCt,'Done');
	  
	  COMMIT;
  else
     delete from i2b2_lz.category
	 where study_id = trialID;
	 	 
     stepCt := stepCt + 1;
	 control.cz_write_audit(jobId,databaseName,procedureName,'Delete all trial data in LZ category',SQL%ROWCOUNT,stepCt,'Done');
	 
	 commit;
  end if;

  --insert new records into the category table
  INSERT INTO I2B2_LZ.CATEGORY
    (study_id, category_cd, category_path)
  SELECT trialID, category_cd, category_path
    FROM i2b2_lz.category_extrnl;
		 
  stepCt := stepCt + 1;
  control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial data into LZ category',SQL%ROWCOUNT,stepCt,'Done');
  
  COMMIT;

  --clear the category table in the working zone
   execute immediate('truncate table i2b2_wz.category');

  --Insert the Category data converting the path to proper case, use the jnj_init_cap function so that "reserved" words are not changed
  INSERT INTO I2B2_WZ.CATEGORY
  select
    category_Cd, 
    control.jnj_init_cap(category_path) as category_path,
    study_id
  FROM
    i2b2_lz.category
    where study_id = trialID;
		 
  stepCt := stepCt + 1;
  control.cz_write_audit(jobId,databaseName,procedureName,'Insert trial data into WZ category',SQL%ROWCOUNT,stepCt,'Done');
  
  commit;

  --Fix category records
  UPDATE i2b2_wz.CATEGORY
  SET CATEGORY_PATH = REPLACE(CATEGORY_PATH, 'Elisa', 'ELISA')
  where category_path like '%Elisa%';
  	 
  stepCt := stepCt + 1;
  control.cz_write_audit(jobId,databaseName,procedureName,'Fix ELISA category_path',SQL%ROWCOUNT,stepCt,'Done');
  commit;
  
   --	do alter table move to defrag i2b2_wz.time_point_measurement
 
   EXECUTE IMMEDIATE 'ALTER TABLE I2B2_WZ.TIME_POINT_MEASUREMENT MOVE';
   EXECUTE IMMEDIATE 'ALTER INDEX I2B2_WZ.IDX_TPM_USUBJID REBUILD';
   EXECUTE IMMEDIATE 'ALTER INDEX I2B2_WZ.IDX_TPM_CATEGORY_CD REBUILD';
   EXECUTE IMMEDIATE 'ALTER INDEX I2B2_WZ.IDX_TPM_DATA_LABEL REBUILD';
   EXECUTE IMMEDIATE 'ANALYZE TABLE I2B2_WZ.TIME_POINT_MEASUREMENT COMPUTE STATISTICS';
   
   stepCt := stepCt + 1;
   control.cz_write_audit(jobId,databaseName,procedureName,'After defrag/analyze',0,stepCt,'Done');
   
  --Clean up LZ tables
  
  delete 
    from i2b2_lz.time_point_measurement
      where study_id = trialID;
  commit;
  
    ---Cleanup OVERALL JOB if this proc is being run standalone
  IF newJobFlag = 1
  THEN
    cz_end_audit (jobID, 'SUCCESS');
  END IF;

  EXCEPTION
  WHEN OTHERS THEN
    --Handle errors.
    cz_error_handler (jobID, procedureName);
    --End Proc
    cz_end_audit (jobID, 'FAIL');

END I2B2_PROCESS_RAW_DATA_EXTRNL;

 
 
 
 


